# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json

name: release
on:
  workflow_dispatch: # Allow running the workflow manually from the GitHub UI
  release:
    types:
      - published    # Run the workflow when a new GitHub release is published

env:
  # Source: https://learn.microsoft.com/en-us/dotnet/core/tools/dotnet-environment-variables#dotnet_skip_first_time_experience
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  # Source: https://learn.microsoft.com/en-us/dotnet/core/tools/telemetry#disclosure
  DOTNET_NOLOGO: true
  NUGET_DIR: ${{ github.workspace }}/nuget

defaults:
  run:
    shell: pwsh

jobs:

  update_version:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3

      - name: Update version
        shell: bash
        run: |
          # Extract version from GitHub context
          VERSION=$(echo "${{ github.event.release.tag_name }}" | sed 's/^v//')

          # Find all .csproj files that contain a <Version> tag and update them
          find . -name '*.csproj' -print0 | xargs -0 grep -l '<Version>' | xargs -I {} sed -i 's|<Version>.*</Version>|<Version>'$VERSION'</Version>|' {}

          # Commit changes
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git checkout main
          git commit -am "chore: ðŸ”§ updated version to $VERSION"
          git push

  # Can't pass env variables to reusable workflow, so we use this hack
  workflow_environment_vars:
    runs-on: ubuntu-latest
    outputs:
      nuget_dir: ${{ env.NUGET_DIR }}
    steps:
      - run: |
          echo "nuget_dir: ${{ env.NUGET_DIR }}"

  create_and_validate_nuget:
    needs: [ workflow_environment_vars, update_version ]
    uses: ./.github/workflows/package.yml
    with:
      nuget-dir: ${{ needs.workflow_environment_vars.outputs.nuget_dir }}

  test:
    uses: ./.github/workflows/test.yml

  deploy:
    runs-on: ubuntu-latest
    needs: [ create_and_validate_nuget, test ]
    steps:
      # Download the NuGet package created in the previous job
      - uses: actions/download-artifact@v3
        with:
          name: nuget
          path: ${{ env.NUGET_DIR }}

      # Install the .NET SDK indicated in the global.json file
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v3

      # Publish all NuGet packages to NuGet.org
      # Use --skip-duplicate to prevent errors if a package with the same version already exists.
      # If you retry a failed workflow, already published packages will be skipped without error.
      - name: Publish NuGet package
        run: |
          foreach($file in (Get-ChildItem "${{ env.NUGET_DIR }}" -Recurse -Include *.nupkg)) {
              dotnet nuget push $file --api-key "${{ secrets.NUGET_API_KEY }}" --source https://api.nuget.org/v3/index.json --skip-duplicate
          }
